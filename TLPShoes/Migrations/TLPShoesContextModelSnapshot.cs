// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TLPShoes.Data;

#nullable disable

namespace TLPShoes.Migrations
{
    [DbContext(typeof(TLPShoesContext))]
    partial class TLPShoesContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TLPShoes.Areas.Identity.Data.TLPShoesUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "86a47f30-e780-4ab6-b62d-56658eb1cb26",
                            AccessFailedCount = 0,
                            Company = "TechSolutions Inc.",
                            ConcurrencyStamp = "fee4af98-a1fe-4e6e-bfac-61dd7dae7266",
                            Email = "alex.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "ALEX_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGcUpwVrI487t1/TsWogANznY6T24dZ3w4cprR+PBHXxvGD5kuCCFOB+yww1zFmO1w==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "16b7e0f6-488e-4671-a286-bf27d540eada",
                            TwoFactorEnabled = false,
                            UserName = "alex_manager"
                        },
                        new
                        {
                            Id = "043d1feb-a2e1-4d62-a2b8-f2d610b2daa6",
                            AccessFailedCount = 0,
                            Company = "Innovative Tech Ltd.",
                            ConcurrencyStamp = "9a69ded2-df4e-497f-9509-90cc8f9b9334",
                            Email = "sarah.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "SARAH_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAfUVWyfBJswIJ1LSH5ED7KexMn/p8k7RhAmrGfRmowbceA9lSDWiSaTMuKf+qQUaA==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "f6e136a1-e67b-41b4-b551-9f9d2a856802",
                            TwoFactorEnabled = false,
                            UserName = "sarah_manager"
                        },
                        new
                        {
                            Id = "ad00643d-2728-4e4f-9219-372ace5af77d",
                            AccessFailedCount = 0,
                            Company = "Digital Strategies Co.",
                            ConcurrencyStamp = "888c33b9-c792-4266-91bc-5e32b2ae5a56",
                            Email = "john.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "JOHN_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPNqOM/uH2QPCAXRXwTpnw0zR87wn+DKt0wReK/k2ScAICkGC7ecVUTZUgRI7/y73w==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "5d7cccf9-bfa2-47e3-a41f-4bc6b88ff690",
                            TwoFactorEnabled = false,
                            UserName = "john_manager"
                        },
                        new
                        {
                            Id = "bc559606-4603-4807-9ec7-1f4f1daa3b21",
                            AccessFailedCount = 0,
                            Company = "NextGen Solutions",
                            ConcurrencyStamp = "dfc6e43f-98d6-4665-8c0e-d207635ce0ae",
                            Email = "emma.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "EMMA_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEw5vr0fpHfpibfwBSwD9TWUFeQZlkM2KNbLK82AEmiBRt+wBTo/xt/gO7w2HaEjdA==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "9cb84768-1f01-4658-977f-734a28f5f4ab",
                            TwoFactorEnabled = false,
                            UserName = "emma_manager"
                        },
                        new
                        {
                            Id = "85aae980-e206-4b2a-9771-6006214aa87d",
                            AccessFailedCount = 0,
                            Company = "Global Innovations",
                            ConcurrencyStamp = "c09480b5-cbd7-4104-b62d-926d1f7d11f5",
                            Email = "david.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAECVl+pW4jBBFGYRzuLSFpfWxyc/Yod2CqV0ERCY/yjGSgYyTun0Ed8Tez0Hah6AP8A==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "5b6d7f37-f585-47c6-b521-7849c45911c9",
                            TwoFactorEnabled = false,
                            UserName = "david_manager"
                        },
                        new
                        {
                            Id = "b6697626-79fb-4799-838c-9675219093c4",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "f9689331-6fba-4fb4-a52e-609e153283ea",
                            Email = "jane.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "JANE_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAnl7muGD++ftiXjrlRICYUyHLruUNL8bRRMXP3xBLvoIKuYk5enDwOPmqF8nbWHSQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "749bccb9-7830-4c30-8714-2c11eba94428",
                            TwoFactorEnabled = false,
                            UserName = "jane_customer"
                        },
                        new
                        {
                            Id = "7507aae8-d9df-4d2b-ae82-e552e5c71bb4",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "6e0fd450-bec5-4c60-af2f-28c50507a625",
                            Email = "mark.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARK.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "MARK_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKStQVBT1thfnRwexxqDO/v3D8BeeuiFFSCtOiv2ugInH3vjsiApvz6fwNMdNVC5eA==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "84395a92-2b23-4000-b0d6-bc843ae00def",
                            TwoFactorEnabled = false,
                            UserName = "mark_customer"
                        },
                        new
                        {
                            Id = "1c89bd90-78b6-4129-987e-16bb4ab86f6e",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "27abc3dd-1e1d-4986-8134-c04053f1f442",
                            Email = "lucy.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCY.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "LUCY_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAENV9NyaXVx7eCf9YjEX8xv+4d/Fm/QkToPuPMmecuV4ji7nkEqP9sx6Fod7Kgez3XA==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "94fbd67a-27af-4f58-b608-4e4c12e4f13e",
                            TwoFactorEnabled = false,
                            UserName = "lucy_customer"
                        },
                        new
                        {
                            Id = "815e9417-8100-4e5e-8a75-9f96face9e66",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "d20212f2-7230-4c8e-ae36-00a129039798",
                            Email = "peter.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETER.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "PETER_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAELHwCA05pfpxUBd4iTgvOZdtYCrFYOQA/ZyD4JYGMrFSccVe5yhxCqlf6Ge3CTHJCw==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "3b8efd54-54f7-4d99-a126-ad25ddcb8e10",
                            TwoFactorEnabled = false,
                            UserName = "peter_customer"
                        },
                        new
                        {
                            Id = "554dc4ba-59ba-4e0b-a6e8-b36b8db0e785",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "a6ee5d7e-9651-48ed-923a-2d05d0514a99",
                            Email = "anna.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "ANNA_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBjMpAueSqpdsyECUEa729Z6yJaNPJcCFyk0llgl4tNAjzMuCqEJlj9D5h4DIPntyw==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "2891ef06-8748-4c4d-aac9-3e9817168831",
                            TwoFactorEnabled = false,
                            UserName = "anna_customer"
                        },
                        new
                        {
                            Id = "00ddae97-843c-49fe-ae97-e37dfa45a38e",
                            AccessFailedCount = 0,
                            Company = "Adidas",
                            ConcurrencyStamp = "8ee8d850-0aac-44c3-ab07-01f4401f2adc",
                            Email = "adidas.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADIDAS.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "ADIDAS_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGY5KZrCTRtxlhYv7u5SqO3qybK5wZPdBlFeCjXQkYrltYvO0/brRyZfkCcZ3Yxpww==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "f97c266d-5a24-420b-8cdb-67bfcdb0ac73",
                            TwoFactorEnabled = false,
                            UserName = "adidas_supplier"
                        },
                        new
                        {
                            Id = "ee9c32f2-23e2-4299-b30f-d4ee6d12ba4f",
                            AccessFailedCount = 0,
                            Company = "Nike",
                            ConcurrencyStamp = "976cb2f5-5b18-4e1a-93a8-8f94f3b27d3f",
                            Email = "nike.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKE.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "NIKE_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAsYvKr89lJ68WWSkEgQpZ30M63WyYBBLcJ9rl3wc/0vZgXwWCEkWjUpKDfMDUhTvg==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "6f7b1758-7589-428d-9a2d-790adedb5ba6",
                            TwoFactorEnabled = false,
                            UserName = "nike_supplier"
                        },
                        new
                        {
                            Id = "2d5d4e50-34b6-441d-9e9a-ee67abdf5ecd",
                            AccessFailedCount = 0,
                            Company = "Puma",
                            ConcurrencyStamp = "1e9be0c3-73ce-43b0-912c-3a047d934cbd",
                            Email = "puma.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PUMA.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "PUMA_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEEwrIeethOrz8vjAeExj0P4sTbEsjRtb5ziiTNzBTKLIyuQwWmhzudGsNM7nLN+DQw==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "d2fcf092-193d-4d03-b95a-6e42357f3119",
                            TwoFactorEnabled = false,
                            UserName = "puma_supplier"
                        },
                        new
                        {
                            Id = "218a4c6e-69a3-44e8-80cb-7bc8a3ae5d6e",
                            AccessFailedCount = 0,
                            Company = "Under Armour",
                            ConcurrencyStamp = "530d4a35-bf47-4297-9542-8c78f4d48042",
                            Email = "underarmour.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UNDERARMOUR.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "UNDERARMOUR_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPqPM84JowMqAT99toUiFSdxQquzLSvyq1YYoGdN0ahRrTuxnT4ln4AakNZLZC8GmA==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "d7f75c65-c5df-4393-abaf-997cac61888b",
                            TwoFactorEnabled = false,
                            UserName = "underarmour_supplier"
                        },
                        new
                        {
                            Id = "2494b3bc-2e79-4344-915b-5a070fcf2361",
                            AccessFailedCount = 0,
                            Company = "New Balance",
                            ConcurrencyStamp = "e6b50299-79ca-4fca-bddf-b472d47248a3",
                            Email = "newbalance.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEWBALANCE.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "NEWBALANCE_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAECVrkQufNNbuaDXApH4iJkU1s15n+qIgxiNCY5X6wtZy+60vGfT7ko+esKkcpufl5g==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "eefe7424-f4e4-44e3-a0f7-c68b1216d7b9",
                            TwoFactorEnabled = false,
                            UserName = "newbalance_supplier"
                        });
                });

            modelBuilder.Entity("TLPShoes.Models.Discount_Logic", b =>
                {
                    b.Property<string>("dlu")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.HasKey("dlu");

                    b.ToTable("Discount_Logic");

                    b.HasData(
                        new
                        {
                            dlu = "DL-001",
                            percentage = 10m,
                            quantity = 100
                        },
                        new
                        {
                            dlu = "DL-002",
                            percentage = 30m,
                            quantity = 1000
                        },
                        new
                        {
                            dlu = "DL-003",
                            percentage = 50m,
                            quantity = 10000
                        });
                });

            modelBuilder.Entity("TLPShoes.Models.Inventory", b =>
                {
                    b.Property<string>("ivt")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("approval_status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("item_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("size")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ivt");

                    b.ToTable("Inventory");

                    b.HasData(
                        new
                        {
                            ivt = "SK-001",
                            approval_status = "declined",
                            category = "sport",
                            date_created = new DateTime(2024, 12, 10, 15, 42, 34, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-6.jpg",
                            item_name = "Ultraboost",
                            price = 200m,
                            quantity = 100,
                            size = 7,
                            username = "001"
                        },
                        new
                        {
                            ivt = "SK-002",
                            approval_status = "approved",
                            category = "dress",
                            date_created = new DateTime(2024, 12, 11, 10, 25, 47, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-7.jpg",
                            item_name = "Jordan",
                            price = 300m,
                            quantity = 100,
                            size = 7,
                            username = "002"
                        },
                        new
                        {
                            ivt = "SK-003",
                            approval_status = "pending",
                            category = "casual",
                            date_created = new DateTime(2024, 12, 12, 8, 13, 22, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-8.jpg",
                            item_name = "Nike Scandal",
                            price = 800m,
                            quantity = 100,
                            size = 7,
                            username = "003"
                        },
                        new
                        {
                            ivt = "SK-004",
                            approval_status = "approved",
                            category = "casual",
                            date_created = new DateTime(2024, 12, 13, 18, 50, 5, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-14.jpg",
                            item_name = "adidas",
                            price = 75m,
                            quantity = 100,
                            size = 7,
                            username = "004"
                        },
                        new
                        {
                            ivt = "SK-005",
                            approval_status = "pending",
                            category = "dress",
                            date_created = new DateTime(2024, 12, 14, 20, 34, 59, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-13.jpg",
                            item_name = "T-shirt",
                            price = 25.00m,
                            quantity = 100,
                            size = 7,
                            username = "005"
                        });
                });

            modelBuilder.Entity("TLPShoes.Models.Notification", b =>
                {
                    b.Property<string>("notification_id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("receiver_username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("sender_username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("notification_id");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            notification_id = "NID-001",
                            date_created = new DateTime(2024, 12, 10, 15, 42, 34, 0, DateTimeKind.Unspecified),
                            message = "SK-001 - Your subsmision has been declide. As quantity not enough, it has to be 100",
                            receiver_username = "002",
                            sender_username = "001",
                            status = "Unread"
                        },
                        new
                        {
                            notification_id = "NID-002",
                            date_created = new DateTime(2024, 12, 10, 15, 42, 34, 0, DateTimeKind.Unspecified),
                            message = "SK-002 - Your subsmision has been approved.",
                            receiver_username = "002",
                            sender_username = "001",
                            status = "Unread"
                        },
                        new
                        {
                            notification_id = "NID-003",
                            date_created = new DateTime(2024, 12, 11, 9, 30, 0, 0, DateTimeKind.Unspecified),
                            message = "SK-002 - Your subsmision has been approved.",
                            receiver_username = "004",
                            sender_username = "003",
                            status = "Unread"
                        },
                        new
                        {
                            notification_id = "NID-004",
                            date_created = new DateTime(2024, 12, 12, 10, 15, 20, 0, DateTimeKind.Unspecified),
                            message = "SK-003 - Your subsmision has been declined.",
                            receiver_username = "001",
                            sender_username = "005",
                            status = "Read"
                        });
                });

            modelBuilder.Entity("TLPShoes.Models.Supply_Form", b =>
                {
                    b.Property<string>("sku")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("approval_status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("date_created")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("gender")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("image_path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("item_name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("quantity")
                        .HasColumnType("int");

                    b.Property<int>("size")
                        .HasMaxLength(10)
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("sku");

                    b.ToTable("Supply_Form");

                    b.HasData(
                        new
                        {
                            sku = "SK-001",
                            approval_status = "declined",
                            category = "sport",
                            date_created = new DateTime(2024, 12, 10, 15, 42, 34, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-6.jpg",
                            item_name = "Ultraboost",
                            price = 200m,
                            quantity = 100,
                            size = 7,
                            username = "001"
                        },
                        new
                        {
                            sku = "SK-002",
                            approval_status = "approved",
                            category = "dress",
                            date_created = new DateTime(2024, 12, 11, 10, 25, 47, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-7.jpg",
                            item_name = "Jordan",
                            price = 300m,
                            quantity = 100,
                            size = 7,
                            username = "002"
                        },
                        new
                        {
                            sku = "SK-003",
                            approval_status = "pending",
                            category = "casual",
                            date_created = new DateTime(2024, 12, 12, 8, 13, 22, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-8.jpg",
                            item_name = "Nike Scandal",
                            price = 800m,
                            quantity = 100,
                            size = 7,
                            username = "003"
                        },
                        new
                        {
                            sku = "SK-004",
                            approval_status = "approved",
                            category = "casual",
                            date_created = new DateTime(2024, 12, 13, 18, 50, 5, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-14.jpg",
                            item_name = "adidas",
                            price = 75m,
                            quantity = 100,
                            size = 7,
                            username = "004"
                        },
                        new
                        {
                            sku = "SK-005",
                            approval_status = "pending",
                            category = "dress",
                            date_created = new DateTime(2024, 12, 14, 20, 34, 59, 0, DateTimeKind.Unspecified),
                            description = "Best shoe in the world",
                            gender = "female",
                            image_path = "~/assets/images/item-13.jpg",
                            item_name = "T-shirt",
                            price = 25.00m,
                            quantity = 100,
                            size = 7,
                            username = "005"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TLPShoes.Data;

#nullable disable

namespace TLPShoes.Migrations
{
    [DbContext(typeof(TLPShoesContext))]
    [Migration("20241210145718_up")]
    partial class up
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TLPShoes.Areas.Identity.Data.TLPShoesUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b3cd0ad6-242b-46a8-8976-f5ded35084f7",
                            AccessFailedCount = 0,
                            Company = "TechSolutions Inc.",
                            ConcurrencyStamp = "bc31b2d1-9465-4b52-a11d-b90f4cc3fc10",
                            Email = "alex.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEX.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "ALEX_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAOnuDeFEGwlkWH8ERPgY60YafLA6iZPbj4pdyf99fJ3nQNLf/hgh/lho5I7mUO0oA==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "ac867b98-5f05-4ac7-b0fc-4b7af7f24399",
                            TwoFactorEnabled = false,
                            UserName = "alex_manager"
                        },
                        new
                        {
                            Id = "40d361e1-1ec5-4f3c-8c7e-2c4eb4eef7b1",
                            AccessFailedCount = 0,
                            Company = "Innovative Tech Ltd.",
                            ConcurrencyStamp = "f5fb2a4c-60f2-4706-99d5-11adeb4eaf93",
                            Email = "sarah.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "SARAH.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "SARAH_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEBe6ZfqEG058FYXetT6TbNcrzOsK4fXmMnZvzU0vBEEIKCmqbhE6G9SUYzIVa1TW+Q==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "e4f0a402-d497-4f1a-8468-62c4e6293477",
                            TwoFactorEnabled = false,
                            UserName = "sarah_manager"
                        },
                        new
                        {
                            Id = "a00ad888-c09c-42b1-a602-f5e46ab93aa7",
                            AccessFailedCount = 0,
                            Company = "Digital Strategies Co.",
                            ConcurrencyStamp = "4968081c-5054-4ddd-a1ca-e35ca1e14b18",
                            Email = "john.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "JOHN_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKmQPrGOcppESXN1X7oeIBoDIyEvsb2nJNcKhhjDBD9j/j4l3WGWqzWHMcckCqU72g==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "d2397c4a-4e6f-4905-83cb-9a8729f90951",
                            TwoFactorEnabled = false,
                            UserName = "john_manager"
                        },
                        new
                        {
                            Id = "e5104f1e-3760-46c3-8686-e0c582da5db9",
                            AccessFailedCount = 0,
                            Company = "NextGen Solutions",
                            ConcurrencyStamp = "803826ff-1098-4512-9f47-cbf54233ab1d",
                            Email = "emma.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "EMMA_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEAVDqnPmvt7XsI/2HcgkhRZkBlTe0fqvPYfEaTrI9j54i1o48ccMUNgW950EvXjXrA==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "ed3feb5b-efd1-487a-aebc-01c3dfe205fd",
                            TwoFactorEnabled = false,
                            UserName = "emma_manager"
                        },
                        new
                        {
                            Id = "da33737e-52e3-4406-a484-af7b51df80e9",
                            AccessFailedCount = 0,
                            Company = "Global Innovations",
                            ConcurrencyStamp = "ca4ee5e2-ad67-4cf4-8330-8f3bad7f8c4c",
                            Email = "david.manager@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "DAVID.MANAGER@EXAMPLE.COM",
                            NormalizedUserName = "DAVID_MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEFGwqw/e0Y2li56zve0wu2IqKgvzKcovkL2ERXep4XO6KA/66YlncsHqkHHZdoOSzQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Manager",
                            SecurityStamp = "884ccd21-5531-4ab8-a00f-fe61329e03a0",
                            TwoFactorEnabled = false,
                            UserName = "david_manager"
                        },
                        new
                        {
                            Id = "f9bdd3ae-c302-43f7-8610-920aae0cd9dd",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "044d9543-48fa-488a-a1aa-0f833f319111",
                            Email = "jane.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "JANE_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAECsFZHHFvTIARpfvMQpUjIKALdNMImr3x6YA3HeEV2JskwJ4qtnHgZ811okXqmwPrQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "97aee398-ba6d-4188-9609-d35b9711c030",
                            TwoFactorEnabled = false,
                            UserName = "jane_customer"
                        },
                        new
                        {
                            Id = "7b6130ca-dfe4-4189-8c19-7f42dba79543",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "a4a17e12-c654-44d4-87be-f0e3e252c74e",
                            Email = "mark.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARK.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "MARK_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGn3ebtj1RndcG27wzCG7yTqjmncLxJhXx4bLa4pDT7ihEWo3/sCLLjKX+VA3z5BQQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "058db463-674c-49c3-9bc9-c07e69830321",
                            TwoFactorEnabled = false,
                            UserName = "mark_customer"
                        },
                        new
                        {
                            Id = "fc95e101-4e24-40d5-84dc-ebad807bfdda",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "810376df-0338-4962-bfd3-d2dab3e1def2",
                            Email = "lucy.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "LUCY.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "LUCY_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ1e5hRhUw3EBCBeZeC4CrSxwuXeZBE0R1XRXZhiL01rWVSaLifrijTlaBwp/fJeJQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "8fc917d1-3c60-43b4-80b1-57367d10208e",
                            TwoFactorEnabled = false,
                            UserName = "lucy_customer"
                        },
                        new
                        {
                            Id = "298864af-f916-4270-b67b-23caecc42236",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "e452e11d-67b1-44ea-9c43-1690ed5de578",
                            Email = "peter.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PETER.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "PETER_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEN0KsF/kHzawxSVao6LXZV0JSOsUoJb5aj2ENIfZrXWT2C4mlqLhzgUCpvvdXvC26Q==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "2ee187c0-d854-4e6e-966a-c5562305489f",
                            TwoFactorEnabled = false,
                            UserName = "peter_customer"
                        },
                        new
                        {
                            Id = "cc336357-19ba-4b41-b22b-3097b4ede2ce",
                            AccessFailedCount = 0,
                            Company = "Self",
                            ConcurrencyStamp = "173c9781-2472-4ce1-a3f1-b33f67cd7034",
                            Email = "anna.customer@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ANNA.CUSTOMER@EXAMPLE.COM",
                            NormalizedUserName = "ANNA_CUSTOMER",
                            PasswordHash = "AQAAAAIAAYagAAAAEGlZKlxGAa969Jp72jqCJvqGPtNK+naIzbNqDYm/6IrRVC+JUX5svgKNs1XwHYeorg==",
                            PhoneNumberConfirmed = false,
                            Role = "Customer",
                            SecurityStamp = "6f279373-d399-4ec1-8eee-080c39c67370",
                            TwoFactorEnabled = false,
                            UserName = "anna_customer"
                        },
                        new
                        {
                            Id = "ed14289f-cadb-48db-b13c-a5173eb98486",
                            AccessFailedCount = 0,
                            Company = "Adidas",
                            ConcurrencyStamp = "aff70ff0-5790-4ecd-af7d-5244195bff14",
                            Email = "adidas.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADIDAS.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "ADIDAS_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEMXPey4OZkSvQ8yPDmnfujfcDH1bEHYiVmPvKpj+AQEPpL2HFy3AMm0Bo7C5Ah+jRw==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "e77969cd-35ca-4324-8bbc-b47f26709876",
                            TwoFactorEnabled = false,
                            UserName = "adidas_supplier"
                        },
                        new
                        {
                            Id = "b9daa899-0aa8-47b7-bb51-fb1a17f9022b",
                            AccessFailedCount = 0,
                            Company = "Nike",
                            ConcurrencyStamp = "64f48c84-cb31-4c07-881a-38438e484602",
                            Email = "nike.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NIKE.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "NIKE_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEKlPCNxSJGLucV0buDiYuJRY/n5rECVzqh3s/NXJJc9solxroNPV/eAwLu9UVoqDmQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "7d384fd0-340b-4f4a-a7b5-8f29521248cf",
                            TwoFactorEnabled = false,
                            UserName = "nike_supplier"
                        },
                        new
                        {
                            Id = "3a153572-91ef-4f15-b2cb-f30afdc61b30",
                            AccessFailedCount = 0,
                            Company = "Puma",
                            ConcurrencyStamp = "feed10a8-7e46-430a-8f61-c15a3c9d7e4f",
                            Email = "puma.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "PUMA.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "PUMA_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEIIQWiic0tdFBclt9Ae6cxRQrbpbtpOMavsiUSwwQiAVTcnhOYoXFboLuQpvF+bHrQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "49bc8a95-5651-401d-964b-54a1c38da391",
                            TwoFactorEnabled = false,
                            UserName = "puma_supplier"
                        },
                        new
                        {
                            Id = "bd718ee4-c181-4940-bad5-e4f34d596331",
                            AccessFailedCount = 0,
                            Company = "Under Armour",
                            ConcurrencyStamp = "3ffce650-2f77-4cde-8397-dfd50636e95c",
                            Email = "underarmour.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "UNDERARMOUR.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "UNDERARMOUR_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAECY0gsXsMwS9iMlNiWQhWic+jJOXfiEcxbFXgOR9r3fYVuRdp+WXFfsmXDxHzT85EQ==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "ec326536-cfec-4df9-9de5-3fb16cde9965",
                            TwoFactorEnabled = false,
                            UserName = "underarmour_supplier"
                        },
                        new
                        {
                            Id = "2340819b-3085-4926-ad09-b2e8c646edab",
                            AccessFailedCount = 0,
                            Company = "New Balance",
                            ConcurrencyStamp = "d3e55862-1149-4c1c-b223-c0c5ca148c53",
                            Email = "newbalance.supplier@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "NEWBALANCE.SUPPLIER@EXAMPLE.COM",
                            NormalizedUserName = "NEWBALANCE_SUPPLIER",
                            PasswordHash = "AQAAAAIAAYagAAAAEF56ccwXwh/pZBnAF638NBqe1Jeh/5hmEZITyczDMsw7ts6krVBsOSDTBQS+p3E3/w==",
                            PhoneNumberConfirmed = false,
                            Role = "Supplier",
                            SecurityStamp = "0d0f0922-96f7-4918-99d3-4bb83dfd0053",
                            TwoFactorEnabled = false,
                            UserName = "newbalance_supplier"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("TLPShoes.Areas.Identity.Data.TLPShoesUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
